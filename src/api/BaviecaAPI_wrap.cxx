/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "BaviecaAPI.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_INIT_1SAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::INIT_SAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_INIT_1ALIGNER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::INIT_ALIGNER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_INIT_1DECODER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::INIT_DECODER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_INIT_1ADAPTATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::INIT_ADAPTATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TAE_1CORRECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::TAE_CORRECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TAE_1SUBSTITUTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::TAE_SUBSTITUTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TAE_1DELETION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::TAE_DELETION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TAE_1INSERTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Bavieca::TAE_INSERTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_new_1BaviecaAPI(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Bavieca::BaviecaAPI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Bavieca::BaviecaAPI *)new Bavieca::BaviecaAPI((char const *)arg1);
  *(Bavieca::BaviecaAPI **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1BaviecaAPI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  unsigned char arg2 ;
  Bavieca::ParamValuesI *arg3 = (Bavieca::ParamValuesI *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = *(Bavieca::ParamValuesI **)&jarg3; 
  result = (bool)(arg1)->initialize(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->initialize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1uninitialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  (arg1)->uninitialize();
}


SWIGEXPORT jfloatArray JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1extractFeatures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2, jlong jarg3, jlongArray jarg4) {
  jfloatArray jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg2 = (short *) jenv->GetShortArrayElements(jarg2, 0); 
  }
  arg3 = (unsigned int)jarg3; 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg4 = (unsigned int *) jenv->GetLongArrayElements(jarg4, 0); 
  }
  result = (float *)(arg1)->extractFeatures(arg2,arg3,arg4);
  {
    jresult = jenv->NewFloatArray((jsize)(*arg4*(arg1)->getFeatureDim()));
    jenv->SetFloatArrayRegion(jresult, 0, (jsize)(*arg4*(arg1)->getFeatureDim()), result);
    delete [] result;
  }
  {
    jenv->ReleaseShortArrayElements(jarg2, (jshort *)arg2, 0); 
  }
  {
    jenv->ReleaseLongArrayElements(jarg4, (jlong *)arg4, 0); 
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1getFeatureDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  result = (int)(arg1)->getFeatureDim();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (float *) jenv->GetFloatArrayElements(jarg2, 0); 
  }
  (arg1)->free(arg2);
  {
    jenv->ReleaseFloatArrayElements(jarg2, (jfloat *)arg2, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1sadBeginSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  (arg1)->sadBeginSession();
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1sadEndSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  (arg1)->sadEndSession();
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1sadFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (float *) jenv->GetFloatArrayElements(jarg2, 0); 
  }
  arg3 = (unsigned int)jarg3; 
  (arg1)->sadFeed(arg2,arg3);
  {
    jenv->ReleaseFloatArrayElements(jarg2, (jfloat *)arg2, 0); 
  }
  
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1sadRecoverSpeechSegments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  Bavieca::SpeechSegmentsI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  result = (Bavieca::SpeechSegmentsI *)(arg1)->sadRecoverSpeechSegments();
  *(Bavieca::SpeechSegmentsI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1align(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  Bavieca::AlignmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg2 = (float *) jenv->GetFloatArrayElements(jarg2, 0); 
  }
  arg3 = (unsigned int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  result = (Bavieca::AlignmentI *)(arg1)->align(arg2,arg3,(char const *)arg4,arg5);
  *(Bavieca::AlignmentI **)&jresult = result; 
  {
    jenv->ReleaseFloatArrayElements(jarg2, (jfloat *)arg2, 0); 
  }
  
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1decBeginUtterance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  (arg1)->decBeginUtterance();
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1decProcess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (float *) jenv->GetFloatArrayElements(jarg2, 0); 
  }
  arg3 = (unsigned int)jarg3; 
  (arg1)->decProcess(arg2,arg3);
  {
    jenv->ReleaseFloatArrayElements(jarg2, (jfloat *)arg2, 0); 
  }
  
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1decGetHypothesis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  char *arg2 = (char *) 0 ;
  Bavieca::HypothesisI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Bavieca::HypothesisI *)(arg1)->decGetHypothesis((char const *)arg2);
  *(Bavieca::HypothesisI **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1decGetHypothesis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  Bavieca::HypothesisI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  result = (Bavieca::HypothesisI *)(arg1)->decGetHypothesis();
  *(Bavieca::HypothesisI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1decEndUtterance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  (arg1)->decEndUtterance();
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1getAssessment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  Bavieca::HypothesisI *arg2 = (Bavieca::HypothesisI *) 0 ;
  char *arg3 = (char *) 0 ;
  Bavieca::TextAlignmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  arg2 = *(Bavieca::HypothesisI **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Bavieca::TextAlignmentI *)(arg1)->getAssessment(arg2,(char const *)arg3);
  *(Bavieca::TextAlignmentI **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1mllrFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloatArray jarg3, jlong jarg4) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = (float *) jenv->GetFloatArrayElements(jarg3, 0); 
  }
  arg4 = (unsigned int)jarg4; 
  (arg1)->mllrFeed((char const *)arg2,arg3,arg4);
  {
    jenv->ReleaseFloatArrayElements(jarg3, (jfloat *)arg3, 0); 
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_BaviecaAPI_1mllrAdapt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bavieca::BaviecaAPI *arg1 = (Bavieca::BaviecaAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::BaviecaAPI **)&jarg1; 
  (arg1)->mllrAdapt();
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_new_1SpeechSegmentI(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Bavieca::SpeechSegmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (Bavieca::SpeechSegmentI *)new Bavieca::SpeechSegmentI(arg1,arg2);
  *(Bavieca::SpeechSegmentI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_SpeechSegmentI_1getFrameStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::SpeechSegmentI *arg1 = (Bavieca::SpeechSegmentI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::SpeechSegmentI **)&jarg1; 
  result = (int)(arg1)->getFrameStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_SpeechSegmentI_1getFrameEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::SpeechSegmentI *arg1 = (Bavieca::SpeechSegmentI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::SpeechSegmentI **)&jarg1; 
  result = (int)(arg1)->getFrameEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1SpeechSegmentI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::SpeechSegmentI *arg1 = (Bavieca::SpeechSegmentI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::SpeechSegmentI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1SpeechSegmentsI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::SpeechSegmentsI *arg1 = (Bavieca::SpeechSegmentsI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::SpeechSegmentsI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_SpeechSegmentsI_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::SpeechSegmentsI *arg1 = (Bavieca::SpeechSegmentsI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::SpeechSegmentsI **)&jarg1; 
  result = (unsigned int)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_SpeechSegmentsI_1getSpeechSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Bavieca::SpeechSegmentsI *arg1 = (Bavieca::SpeechSegmentsI *) 0 ;
  unsigned int arg2 ;
  Bavieca::SpeechSegmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::SpeechSegmentsI **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Bavieca::SpeechSegmentI *)(arg1)->getSpeechSegment(arg2);
  *(Bavieca::SpeechSegmentI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_new_1ParamValueI(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Bavieca::ParamValueI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Bavieca::ParamValueI *)new Bavieca::ParamValueI((char const *)arg1,(char const *)arg2);
  *(Bavieca::ParamValueI **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_ParamValueI_1getParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::ParamValueI *arg1 = (Bavieca::ParamValueI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::ParamValueI **)&jarg1; 
  result = (char *)(arg1)->getParameter();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_ParamValueI_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::ParamValueI *arg1 = (Bavieca::ParamValueI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::ParamValueI **)&jarg1; 
  result = (char *)(arg1)->getValue();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1ParamValueI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::ParamValueI *arg1 = (Bavieca::ParamValueI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::ParamValueI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1ParamValuesI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::ParamValuesI *arg1 = (Bavieca::ParamValuesI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::ParamValuesI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_ParamValuesI_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::ParamValuesI *arg1 = (Bavieca::ParamValuesI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::ParamValuesI **)&jarg1; 
  result = (unsigned int)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_ParamValuesI_1getParamValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Bavieca::ParamValuesI *arg1 = (Bavieca::ParamValuesI *) 0 ;
  unsigned int arg2 ;
  Bavieca::ParamValueI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::ParamValuesI **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Bavieca::ParamValueI *)(arg1)->getParamValue(arg2);
  *(Bavieca::ParamValueI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_new_1WordHypothesisI(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  Bavieca::WordHypothesisI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (Bavieca::WordHypothesisI *)new Bavieca::WordHypothesisI((char const *)arg1,arg2,arg3);
  *(Bavieca::WordHypothesisI **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1WordHypothesisI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::WordHypothesisI *arg1 = (Bavieca::WordHypothesisI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::WordHypothesisI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordHypothesisI_1getWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::WordHypothesisI *arg1 = (Bavieca::WordHypothesisI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordHypothesisI **)&jarg1; 
  result = (char *)(arg1)->getWord();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordHypothesisI_1getFrameStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::WordHypothesisI *arg1 = (Bavieca::WordHypothesisI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordHypothesisI **)&jarg1; 
  result = (int)(arg1)->getFrameStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordHypothesisI_1getFrameEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::WordHypothesisI *arg1 = (Bavieca::WordHypothesisI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordHypothesisI **)&jarg1; 
  result = (int)(arg1)->getFrameEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1HypothesisI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::HypothesisI *arg1 = (Bavieca::HypothesisI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::HypothesisI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_HypothesisI_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::HypothesisI *arg1 = (Bavieca::HypothesisI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::HypothesisI **)&jarg1; 
  result = (unsigned int)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_HypothesisI_1getWordHypothesis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Bavieca::HypothesisI *arg1 = (Bavieca::HypothesisI *) 0 ;
  unsigned int arg2 ;
  Bavieca::WordHypothesisI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::HypothesisI **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Bavieca::WordHypothesisI *)(arg1)->getWordHypothesis(arg2);
  *(Bavieca::WordHypothesisI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_new_1PhoneAlignmentI(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  Bavieca::PhoneAlignmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (Bavieca::PhoneAlignmentI *)new Bavieca::PhoneAlignmentI((char const *)arg1,arg2,arg3);
  *(Bavieca::PhoneAlignmentI **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_PhoneAlignmentI_1getPhone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::PhoneAlignmentI *arg1 = (Bavieca::PhoneAlignmentI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::PhoneAlignmentI **)&jarg1; 
  result = (char *)(arg1)->getPhone();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_PhoneAlignmentI_1getFrameStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::PhoneAlignmentI *arg1 = (Bavieca::PhoneAlignmentI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::PhoneAlignmentI **)&jarg1; 
  result = (int)(arg1)->getFrameStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_PhoneAlignmentI_1getFrameEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::PhoneAlignmentI *arg1 = (Bavieca::PhoneAlignmentI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::PhoneAlignmentI **)&jarg1; 
  result = (int)(arg1)->getFrameEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1PhoneAlignmentI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::PhoneAlignmentI *arg1 = (Bavieca::PhoneAlignmentI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::PhoneAlignmentI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1WordAlignmentI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::WordAlignmentI *arg1 = (Bavieca::WordAlignmentI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::WordAlignmentI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordAlignmentI_1getWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::WordAlignmentI *arg1 = (Bavieca::WordAlignmentI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordAlignmentI **)&jarg1; 
  result = (char *)(arg1)->getWord();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordAlignmentI_1getFrameStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::WordAlignmentI *arg1 = (Bavieca::WordAlignmentI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordAlignmentI **)&jarg1; 
  result = (int)(arg1)->getFrameStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordAlignmentI_1getFrameEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bavieca::WordAlignmentI *arg1 = (Bavieca::WordAlignmentI *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordAlignmentI **)&jarg1; 
  result = (int)(arg1)->getFrameEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordAlignmentI_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::WordAlignmentI *arg1 = (Bavieca::WordAlignmentI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordAlignmentI **)&jarg1; 
  result = (unsigned int)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_WordAlignmentI_1getPhoneAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Bavieca::WordAlignmentI *arg1 = (Bavieca::WordAlignmentI *) 0 ;
  unsigned int arg2 ;
  Bavieca::PhoneAlignmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::WordAlignmentI **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Bavieca::PhoneAlignmentI *)(arg1)->getPhoneAlignment(arg2);
  *(Bavieca::PhoneAlignmentI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1AlignmentI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::AlignmentI *arg1 = (Bavieca::AlignmentI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::AlignmentI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_AlignmentI_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::AlignmentI *arg1 = (Bavieca::AlignmentI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::AlignmentI **)&jarg1; 
  result = (unsigned int)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_AlignmentI_1getWordAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Bavieca::AlignmentI *arg1 = (Bavieca::AlignmentI *) 0 ;
  unsigned int arg2 ;
  Bavieca::WordAlignmentI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::AlignmentI **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Bavieca::WordAlignmentI *)(arg1)->getWordAlignment(arg2);
  *(Bavieca::WordAlignmentI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_new_1TextAlignmentElementI(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  Bavieca::TextAlignmentElementI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (Bavieca::TextAlignmentElementI *)new Bavieca::TextAlignmentElementI(arg1,arg2,(char const *)arg3,arg4,(char const *)arg5);
  *(Bavieca::TextAlignmentElementI **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentElementI_1getEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Bavieca::TextAlignmentElementI *arg1 = (Bavieca::TextAlignmentElementI *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentElementI **)&jarg1; 
  result = (unsigned char)(arg1)->getEvent();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentElementI_1getIndexRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::TextAlignmentElementI *arg1 = (Bavieca::TextAlignmentElementI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentElementI **)&jarg1; 
  result = (unsigned int)(arg1)->getIndexRef();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentElementI_1getWordRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::TextAlignmentElementI *arg1 = (Bavieca::TextAlignmentElementI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentElementI **)&jarg1; 
  result = (char *)(arg1)->getWordRef();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentElementI_1getIndexHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::TextAlignmentElementI *arg1 = (Bavieca::TextAlignmentElementI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentElementI **)&jarg1; 
  result = (unsigned int)(arg1)->getIndexHyp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentElementI_1getWordHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bavieca::TextAlignmentElementI *arg1 = (Bavieca::TextAlignmentElementI *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentElementI **)&jarg1; 
  result = (char *)(arg1)->getWordHyp();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1TextAlignmentElementI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::TextAlignmentElementI *arg1 = (Bavieca::TextAlignmentElementI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::TextAlignmentElementI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_delete_1TextAlignmentI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bavieca::TextAlignmentI *arg1 = (Bavieca::TextAlignmentI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bavieca::TextAlignmentI **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentI_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bavieca::TextAlignmentI *arg1 = (Bavieca::TextAlignmentI *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentI **)&jarg1; 
  result = (unsigned int)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_blt_bavieca_BaviecaAPI_1SWIGJNI_TextAlignmentI_1getElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Bavieca::TextAlignmentI *arg1 = (Bavieca::TextAlignmentI *) 0 ;
  unsigned int arg2 ;
  Bavieca::TextAlignmentElementI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bavieca::TextAlignmentI **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Bavieca::TextAlignmentElementI *)(arg1)->getElement(arg2);
  *(Bavieca::TextAlignmentElementI **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

